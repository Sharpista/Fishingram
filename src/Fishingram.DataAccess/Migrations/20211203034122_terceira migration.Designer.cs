// <auto-generated />
using System;
using Fishingram.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fishingram.DataAccess.Migrations
{
    [DbContext(typeof(FishingramContext))]
    [Migration("20211203034122_terceira migration")]
    partial class terceiramigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fishingram.Domain.Entities.Follow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("FollowerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FollowingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FollowerId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SenderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PhotoAlbumId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhotoAlbumId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.PhotoAlbum", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("PhotoAlbums");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("PhotoId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProfilePictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Follow", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.UserProfile", "Follower")
                        .WithMany()
                        .HasForeignKey("FollowerId");

                    b.HasOne("Fishingram.Domain.Entities.UserProfile", "Following")
                        .WithMany()
                        .HasForeignKey("FollowingId");

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.UserProfile", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Photo", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.PhotoAlbum", null)
                        .WithMany("Photos")
                        .HasForeignKey("PhotoAlbumId");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.PhotoAlbum", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.UserProfile", null)
                        .WithMany("PhotoAlbums")
                        .HasForeignKey("UserProfileId");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.Post", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("Fishingram.Domain.Entities.UserProfile", null)
                        .WithMany("Posts")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("Fishingram.Domain.Entities.Photo", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.OwnsOne("Fishingram.Domain.ValueObject.Entities.FullAddress", "Address", b1 =>
                        {
                            b1.Property<long>("UserProfileId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("District")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Number")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UF")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("Address");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.PhotoAlbum", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Fishingram.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("PhotoAlbums");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
